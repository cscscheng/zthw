/*
  These are defined in simips.h

#define MD_TOP_OP(INST)		(((INST) >> 26) & 0x3f)

#define RS              ((inst >> 21) & 0x1f)
#define RT              ((inst >> 16) & 0x1f)   
#define RD              ((inst >> 11) & 0x1f)

#define IMME            (inst & 0xffff)

#define SHIFT_SHAMT ((inst >> 7) & 0x1f)
*/

/*
DEFLINK(ALUREG_LINK, 0x00, "alureg_link", 0, 0x3f)
*/

DEFLINK(ALURTYPE_LINK, 0x00, "alu_r-type_link", 0, 0x3f)

#define J_IMPL		\
	{								\
		SET_NPC((CPC&0xfc000000)|(IMME26));	\
	}
DEFINST(J,	0x02,
		"j",	"",
		NA,	F_TRAP,
		DNA, DNA, DNA, DNA, DNA ,DNA, DNA)

#define BEQ_IMPL		\
	{									\
		if (GPR(RS) == GPR(RT))		\
			SET_NPC(CPC+4+(SEXT(IMME)<<2));		\
	}
DEFINST(BEQ,		0x04,
		"beq",		"",
		NA,		F_TRAP,
		DNA, DNA, DNA,	DNA, DNA, DNA, DNA)

#define BNE_IMPL		\
	{									\
		if (GPR(RS) != GPR(RT))		\
			SET_NPC(CPC+4+(SEXT(IMME)<<2));		\
	}
DEFINST(BNE,		0x05,
		"bne",		"",
		NA,		F_TRAP,
		DNA, DNA, DNA,	DNA, DNA, DNA, DNA)

#define ADDI_IMPL							\
  {									\
		SET_GPR(RT,GPR(RS)+SEXT(IMME));					\
  }
DEFINST(ADDI,			0x08,
	"addi",			"",
	NA,			F_TRAP,
	DNA, DNA, DNA,		DNA, DNA, DNA, DNA)

#define LW_IMPL								\
  {									\
	enum md_fault_type _fault;					\
	word_t _result;							\
									\
	_result = READ_WORD(GPR(RS)+OFFSET,_fault );			\
	if(_fault != md_fault_none)					\
		DECLARE_FAULT(_fault);					\
	SET_GPR(RT, _result);						\
  }
DEFINST(LW,			0x23,
	"lw",			"",
	NA,			F_TRAP,
	DNA, DNA, DNA,		DNA, DNA, DNA, DNA)

#define SW_IMPL								\
  {									\
	enum md_fault_type _fault;					\
									\
	WRITE_WORD(GPR(RT),GPR(RS)+OFFSET,_fault );			\
	if(_fault != md_fault_none)					\
		DECLARE_FAULT(_fault);					\
  }
DEFINST(SW,			0x2b,
	"sw",			"",
	NA,			F_TRAP,
	DNA, DNA, DNA,		DNA, DNA, DNA, DNA)

/*
#define SWP_IMPL							\
  {									\
	int tmp;							\
	tmp = GPR(RS);							\
	SET_GPR(RS, GPR(RD));						\
	SET_GPR(RD, tmp);						\
  }
DEFINST(SWP,			0x05,
	"swp",			"",
	NA,			F_TRAP,
	DNA, DNA, DNA,		DNA, DNA, DNA, DNA)
*/
#define SWI_IMPL							\
  {									\
	SYSCALL(inst);							\
  }
DEFINST(SWI,			0x3f,
	"swi",			"",
	NA,			F_TRAP,
	DNA, DNA, DNA,		DNA, DNA, DNA, DNA)


CONNECT(ALURTYPE_LINK)

#define SLL_IMPL			\
	{										\
		SET_GPR(RD, GPR(RS)<<MSHAMT);	\
	}
DEFINST(SLL, 0x00,
		"sll",	"",
		IntALU, F_TRAP,
		DNA, DNA, DNA, DNA, DNA, DNA, DNA)

#define ADD_IMPL							\
  {									\
	SET_GPR(RD,GPR(RS)+GPR(RT));					\
  }
DEFINST(ADD,			0x20,
	"add",			"",
	NA,			F_TRAP,
	DNA, DNA, DNA,		DNA, DNA, DNA, DNA)

#define SUB_IMPL			\
	{										\
		SET_GPR(RD,GPR(RS)-GPR(RT));		\
	}
DEFINST(SUB, 0x22,
		"sub", "",
		IntALU,	F_TRAP,
		DNA, DNA, DNA, DNA, DNA, DNA, DNA)

#define SLT_IMPL	\
	{								\
		SET_GPR(RD, GPR(RS)<GPR(RT)?1:0);	\
	}
DEFINST(SLT,	0x2a,
		"slt",	"",
		IntALU, F_TRAP,
		DNA, DNA, DNA, DNA, DNA, DNA, DNA)

/*
CONNECT(ALUREG_LINK)
#define ADD_IMPL							\
  {									\
	SET_GPR(RD,GPR(RS)+GPR(RT));					\
  }
DEFINST(ADD,			0x20,
	"add",			"",
	IntALU,			F_ICOMP,
	DNA,DNA,DNA,		DNA,DNA,DNA,DNA)
*/

#undef BEQ_IMPL
#undef SUB_IMPL
#undef ADD_IMPL
#undef ADDI_IMPL
#undef LW_IMPL
#undef SW_IMPL
#undef SWP_IMPL
#undef SWI_IMPL
#undef SLT_IMPL
#undef SLL_IMPL
/*#undef ADD_IMPL*/

#undef DEFINST
#undef DEFLINK
#undef CONNECT
#undef DEFUOP
