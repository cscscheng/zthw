!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
DEBUG	BCH_Global.c	64;"	d	file:
DEBUG	bch_global.c	64;"	d	file:
Parallel	BCH_Global.c	/^int Parallel ;			\/\/ Parallel processing$/;"	v
Parallel	bch_global.c	/^int Parallel ;			\/\/ Parallel processing$/;"	v
T_G	BCH_Global.c	/^int T_G[rr_max][rr_max], T_G_R[rr_max][rr_max];		\/\/ Parallel lookahead table$/;"	v
T_G	bch_global.c	/^int T_G[rr_max][rr_max], T_G_R[rr_max][rr_max];		\/\/ Parallel lookahead table$/;"	v
T_G_R	BCH_Global.c	/^int T_G[rr_max][rr_max], T_G_R[rr_max][rr_max];		\/\/ Parallel lookahead table$/;"	v
T_G_R	bch_global.c	/^int T_G[rr_max][rr_max], T_G_R[rr_max][rr_max];		\/\/ Parallel lookahead table$/;"	v
T_G_R_Temp	BCH_Global.c	/^int T_G_R_Temp[rr_max][rr_max] ; $/;"	v
T_G_R_Temp	bch_global.c	/^int T_G_R_Temp[rr_max][rr_max] ; $/;"	v
Verbose	BCH_Global.c	/^int Verbose ;			\/\/ Mode indicator$/;"	v
Verbose	bch_global.c	/^int Verbose ;			\/\/ Mode indicator$/;"	v
alpha_to	BCH_Global.c	/^int p[mm_max + 1], alpha_to[nn_max], index_of[nn_max] ;	\/\/ Galois field$/;"	v
alpha_to	bch_global.c	/^int p[mm_max + 1], alpha_to[nn_max], index_of[nn_max] ;	\/\/ Galois field$/;"	v
bb	bch_decoder.c	/^int bb[rr_max] ;	\/\/ Syndrome polynomial$/;"	v
bb	bch_encoder.c	/^int bb[rr_max] ;		\/\/ Parity checks$/;"	v
bb	encoder.c	/^int bb[rr_max] ;		\/\/ Parity checks$/;"	v
codeword	error.c	/^int codeword[16 * kk_max] ;	\/\/ Incoming data$/;"	v
count	bch_decoder.c	/^int count;		\/\/ Number of errors$/;"	v
data	BCH_Global.c	/^int data[kk_max], data_p[parallel_max][kk_max], recd[nn_max] ;	\/\/ Information data and received data$/;"	v
data	bch_global.c	/^int data[kk_max], data_p[parallel_max][kk_max], recd[nn_max] ;	\/\/ Information data and received data$/;"	v
data_p	BCH_Global.c	/^int data[kk_max], data_p[parallel_max][kk_max], recd[nn_max] ;	\/\/ Information data and received data$/;"	v
data_p	bch_global.c	/^int data[kk_max], data_p[parallel_max][kk_max], recd[nn_max] ;	\/\/ Information data and received data$/;"	v
decode_bch	bch_decoder.c	/^void decode_bch() {$/;"	f
decode_flag	bch_decoder.c	/^int decode_flag;	\/\/ Decoding indicator $/;"	v
df_m	BCH_Global.c	/^int df_m = 13;              	\/\/ BCH code over GF(2**mm)$/;"	v
df_m	bch_global.c	/^int df_m = 13;              	\/\/ BCH code over GF(2**mm)$/;"	v
df_p	BCH_Global.c	/^int df_p = 8;              	\/\/ Number of substreams to calculate in parallel$/;"	v
df_p	bch_global.c	/^int df_p = 8;              	\/\/ Number of substreams to calculate in parallel$/;"	v
df_t	BCH_Global.c	/^int df_t = 4;              	\/\/ Number of errors that can be corrected$/;"	v
df_t	bch_global.c	/^int df_t = 4;              	\/\/ Number of errors that can be corrected$/;"	v
gen_poly	BCH_Global.c	/^void gen_poly()$/;"	f
gen_poly	bch_global.c	/^void gen_poly()$/;"	f
generate_gf	BCH_Global.c	/^void generate_gf()$/;"	f
generate_gf	bch_global.c	/^void generate_gf()$/;"	f
gg	BCH_Global.c	/^int gg[rr_max] ;		\/\/ Generator polynomial$/;"	v
gg	bch_global.c	/^int gg[rr_max] ;		\/\/ Generator polynomial$/;"	v
hextoint	BCH_Global.c	/^int hextoint(char hex)$/;"	f	signature:(char hex)
hextoint	bch_global.c	/^int hextoint(char hex)$/;"	f	signature:(char hex)
index_of	BCH_Global.c	/^int p[mm_max + 1], alpha_to[nn_max], index_of[nn_max] ;	\/\/ Galois field$/;"	v
index_of	bch_global.c	/^int p[mm_max + 1], alpha_to[nn_max], index_of[nn_max] ;	\/\/ Galois field$/;"	v
inttohex	BCH_Global.c	/^char inttohex(int i)$/;"	f	signature:(int i)
inttohex	bch_global.c	/^char inttohex(int i)$/;"	f	signature:(int i)
kk	BCH_Global.c	/^int mm, nn, kk, tt, rr;		\/\/ BCH code parameters$/;"	v
kk	bch_global.c	/^int mm, nn, kk, tt, rr;		\/\/ BCH code parameters$/;"	v
kk_max	BCH_Global.c	61;"	d	file:
kk_max	bch_global.c	61;"	d	file:
kk_shorten	BCH_Global.c	/^int nn_shorten, kk_shorten;	\/\/ Shortened BCH code$/;"	v
kk_shorten	bch_global.c	/^int nn_shorten, kk_shorten;	\/\/ Shortened BCH code$/;"	v
location	bch_decoder.c	/^int location[tt_max];	\/\/ Error location$/;"	v
main	bch_decoder.c	/^int main(int argc,  char** argv)$/;"	f	signature:(int argc, char** argv)
main	bch_encoder.c	/^int main(int argc,  char** argv)$/;"	f	signature:(int argc, char** argv)
main	data_generator.c	/^int main(int argc,  char** argv)$/;"	f	signature:(int argc, char** argv)
main	encoder.c	/^int main(int argc,  char** argv)$/;"	f	signature:(int argc, char** argv)
main	error.c	/^int main(int argc,  char** argv)$/;"	f	signature:(int argc, char** argv)
mm	BCH_Global.c	/^int mm, nn, kk, tt, rr;		\/\/ BCH code parameters$/;"	v
mm	bch_global.c	/^int mm, nn, kk, tt, rr;		\/\/ BCH code parameters$/;"	v
mm_max	BCH_Global.c	58;"	d	file:
mm_max	bch_global.c	58;"	d	file:
nn	BCH_Global.c	/^int mm, nn, kk, tt, rr;		\/\/ BCH code parameters$/;"	v
nn	bch_global.c	/^int mm, nn, kk, tt, rr;		\/\/ BCH code parameters$/;"	v
nn_max	BCH_Global.c	59;"	d	file:
nn_max	bch_global.c	59;"	d	file:
nn_shorten	BCH_Global.c	/^int nn_shorten, kk_shorten;	\/\/ Shortened BCH code$/;"	v
nn_shorten	bch_global.c	/^int nn_shorten, kk_shorten;	\/\/ Shortened BCH code$/;"	v
p	BCH_Global.c	/^int p[mm_max + 1], alpha_to[nn_max], index_of[nn_max] ;	\/\/ Galois field$/;"	v
p	bch_global.c	/^int p[mm_max + 1], alpha_to[nn_max], index_of[nn_max] ;	\/\/ Galois field$/;"	v
parallel_encode_bch	bch_encoder.c	/^void parallel_encode_bch()$/;"	f
parallel_encode_bch	encoder.c	/^void parallel_encode_bch()$/;"	f
parallel_max	BCH_Global.c	63;"	d	file:
parallel_max	bch_global.c	63;"	d	file:
parallel_syndrome	bch_decoder.c	/^void parallel_syndrome() {$/;"	f
print_hex	BCH_Global.c	/^void print_hex(int length, int Binary_data[length], FILE *std)$/;"	f	signature:(int length, int Binary_data[length], FILE *std)
print_hex	bch_global.c	/^void print_hex(int length, int Binary_data[length], FILE *std)$/;"	f	signature:(int length, int Binary_data[length], FILE *std)
print_hex_low	BCH_Global.c	/^void print_hex_low(int length, int Binary_data[length], FILE *std)$/;"	f	signature:(int length, int Binary_data[length], FILE *std)
print_hex_low	bch_global.c	/^void print_hex_low(int length, int Binary_data[length], FILE *std)$/;"	f	signature:(int length, int Binary_data[length], FILE *std)
recd	BCH_Global.c	/^int data[kk_max], data_p[parallel_max][kk_max], recd[nn_max] ;	\/\/ Information data and received data$/;"	v
recd	bch_global.c	/^int data[kk_max], data_p[parallel_max][kk_max], recd[nn_max] ;	\/\/ Information data and received data$/;"	v
rr	BCH_Global.c	/^int mm, nn, kk, tt, rr;		\/\/ BCH code parameters$/;"	v
rr	bch_global.c	/^int mm, nn, kk, tt, rr;		\/\/ BCH code parameters$/;"	v
rr_max	BCH_Global.c	62;"	d	file:
rr_max	bch_global.c	62;"	d	file:
s	bch_decoder.c	/^int s[rr_max];		\/\/ Syndrome values$/;"	v
syn_error	bch_decoder.c	/^int syn_error;		\/\/ Syndrome error indicator$/;"	v
tt	BCH_Global.c	/^int mm, nn, kk, tt, rr;		\/\/ BCH code parameters$/;"	v
tt	bch_global.c	/^int mm, nn, kk, tt, rr;		\/\/ BCH code parameters$/;"	v
tt_max	BCH_Global.c	60;"	d	file:
tt_max	bch_global.c	60;"	d	file:
ttx2	bch_decoder.c	/^int ttx2;		\/\/ 2t$/;"	v
