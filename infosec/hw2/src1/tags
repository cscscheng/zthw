!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
AESDecrypt	AES.c	/^void AESDecrypt(ubyte_t * output, const ubyte_t * key, int Nb, int Nk, int Nr)$/;"	f	signature:(ubyte_t * output, const ubyte_t * key, int Nb, int Nk, int Nr)
AESDecrypt	AES.h	/^void AESDecrypt(ubyte_t * output, const ubyte_t * key, int Nb, int Nk, int Nr);$/;"	p	signature:(ubyte_t * output, const ubyte_t * key, int Nb, int Nk, int Nr)
AESEncrypt	AES.c	/^void AESEncrypt(ubyte_t * output, const ubyte_t * key, int Nb, int Nk, int Nr)$/;"	f	signature:(ubyte_t * output, const ubyte_t * key, int Nb, int Nk, int Nr)
AESEncrypt	AES.h	/^void AESEncrypt(ubyte_t * output, const ubyte_t * key, int Nb, int Nk, int Nr);$/;"	p	signature:(ubyte_t * output, const ubyte_t * key, int Nb, int Nk, int Nr)
AddRoundKey	AES.c	/^void AddRoundKey(ubyte_t * state, ubyte_t * key, int length)$/;"	f	signature:(ubyte_t * state, ubyte_t * key, int length)
BLOCK_BIT_SIZE	PlainText.h	6;"	d
BLOCK_BYTE_SIZE	PlainText.h	7;"	d
DELIMITER	PlainText.c	7;"	d	file:
ECBDecrypt	ECB.c	/^int ECBDecrypt(const ubyte_t *cipher, const ubyte_t *key, ubyte_t **plain, int length)$/;"	f	signature:(const ubyte_t *cipher, const ubyte_t *key, ubyte_t **plain, int length)
ECBDecrypt	ECB.h	/^int ECBDecrypt(const ubyte_t *cipher, const ubyte_t *key, ubyte_t **plain, int length);$/;"	p	signature:(const ubyte_t *cipher, const ubyte_t *key, ubyte_t **plain, int length)
ECBEncrypt	ECB.c	/^int ECBEncrypt(const ubyte_t *plain, const ubyte_t *key, ubyte_t **cipher, int length)$/;"	f	signature:(const ubyte_t *plain, const ubyte_t *key, ubyte_t **cipher, int length)
ECBEncrypt	ECB.h	/^int ECBEncrypt(const ubyte_t *plain, const ubyte_t *key, ubyte_t **cipher, int length);$/;"	p	signature:(const ubyte_t *plain, const ubyte_t *key, ubyte_t **cipher, int length)
EOT	PlainText.c	8;"	d	file:
FormatPlainText	PlainText.c	/^int FormatPlainText(const ubyte_t *text, ubyte_t **out, int length)$/;"	f	signature:(const ubyte_t *text, ubyte_t **out, int length)
FormatPlainText	PlainText.h	/^int FormatPlainText(const ubyte_t *text, ubyte_t **out, int length);$/;"	p	signature:(const ubyte_t *text, ubyte_t **out, int length)
GF_Mul_X2	AES.c	/^ubyte_t GF_Mul_X2(ubyte_t a)$/;"	f	signature:(ubyte_t a)
GF_Mul_X3	AES.c	/^ubyte_t GF_Mul_X3(ubyte_t a)$/;"	f	signature:(ubyte_t a)
GF_Mul_X9	AES.c	/^ubyte_t GF_Mul_X9(ubyte_t a)$/;"	f	signature:(ubyte_t a)
GF_Mul_Xb	AES.c	/^ubyte_t GF_Mul_Xb(ubyte_t a)$/;"	f	signature:(ubyte_t a)
GF_Mul_Xd	AES.c	/^ubyte_t GF_Mul_Xd(ubyte_t a)$/;"	f	signature:(ubyte_t a)
GF_Mul_Xe	AES.c	/^ubyte_t GF_Mul_Xe(ubyte_t a)$/;"	f	signature:(ubyte_t a)
InvKeyExpansion	AES.c	/^void InvKeyExpansion(const ubyte_t * key, ubyte_t * key_pool, int Nk, int Nb, int Nr)$/;"	f	signature:(const ubyte_t * key, ubyte_t * key_pool, int Nk, int Nb, int Nr)
InvMixColumns	AES.c	/^void InvMixColumns(unsigned char * state, int length)$/;"	f	signature:(unsigned char * state, int length)
InvShiftRows	AES.c	/^void InvShiftRows(unsigned char * state, int length)$/;"	f	signature:(unsigned char * state, int length)
InvSubBytes	AES.c	/^void InvSubBytes(unsigned char * state, int length)$/;"	f	signature:(unsigned char * state, int length)
KeyExpansion	AES.c	/^void KeyExpansion(const ubyte_t * key, ubyte_t * key_pool, int Nk, int Nb, int Nr)$/;"	f	signature:(const ubyte_t * key, ubyte_t * key_pool, int Nk, int Nb, int Nr)
MixColumns	AES.c	/^void MixColumns(unsigned char * state, int length)$/;"	f	signature:(unsigned char * state, int length)
NB	ECB.c	2;"	d	file:
NK	ECB.c	1;"	d	file:
NR	ECB.c	3;"	d	file:
ParsePlainText	PlainText.c	/^int ParsePlainText(const ubyte_t *text, ubyte_t **out, int length)$/;"	f	signature:(const ubyte_t *text, ubyte_t **out, int length)
ParsePlainText	PlainText.h	/^int ParsePlainText(const ubyte_t *text, ubyte_t **out, int length);$/;"	p	signature:(const ubyte_t *text, ubyte_t **out, int length)
ROW_COUNT	AES.h	4;"	d
Rcon	AES.c	/^const ubyte_t Rcon[] = { 0x01, 0x02, 0x04, 0x08,$/;"	v
ShiftRows	AES.c	/^void ShiftRows(unsigned char * state, int length)$/;"	f	signature:(unsigned char * state, int length)
SubBytes	AES.c	/^void SubBytes(unsigned char * state, int length)$/;"	f	signature:(unsigned char * state, int length)
TEST_DATA_LEN	test_main.c	6;"	d	file:
__AES_H__	AES.h	2;"	d
__ECB_H__	ECB.h	2;"	d
__PLAINTEXT_H__	PlainText.h	2;"	d
__TYPES_H__	types.h	2;"	d
inv_sbox	AES.c	/^int inv_sbox[256] = {$/;"	v
main	AES.c	/^int main()$/;"	f
main	ECB.c	/^int main()$/;"	f
main	test_main.c	/^int main()$/;"	f
sbox	AES.c	/^const ubyte_t sbox[256] = {$/;"	v
test_key	key.h	/^ubyte_t test_key[128] = {$/;"	v
ubyte_t	types.h	/^typedef unsigned char ubyte_t;$/;"	t
uword_t	types.h	/^typedef unsigned int uword_t;$/;"	t
xtime	AES.c	/^unsigned char xtime(unsigned char a, unsigned char b)$/;"	f	signature:(unsigned char a, unsigned char b)
